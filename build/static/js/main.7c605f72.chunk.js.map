{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","handleTermChange","bind","search","this","onSearch","event","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c605f72.chunk.js","sourcesContent":["const clientId = '55fdf16ac7ba4972bf1ac41bda0e38ad';\nconst redirectUri= 'http://react-jamming-app.surge.sh'; \n\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n\n        // check for access token match\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            window.setTimeout(() => accessToken = '', expiresIn * 1000); \n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n            Authorization: `Bearer ${accessToken}`\n            }\n        }).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            if (!jsonResponse.tracks) {\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id, \n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name, \n                uri: track.uri\n            }));\n        });\n    },\n\n    savePlaylist(name, trackUris) {\n        if (!name || !trackUris.length) {\n            return\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}`};\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\n            ).then(response => response.json()\n            ).then(jsonResponse => {\n             userId = jsonResponse.id; \n             return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ name: name })\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ uris: trackUris })\n                })\n            })\n        })\n    }\n}\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      term: ''\n    }\n\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n\n  handleTermChange(event) {\n    this.setState({ term: event.target.value });\n  }\n\n  render() {\n  return (\n    <div className=\"SearchBar\">\n      <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\n      <button onClick={this.search} className=\"SearchButton\">SEARCH</button>\n    </div>\n  );\n}\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack= this.removeTrack.bind(this);\n  }\n\n  renderAction() {\n    if (this.props.isRemoval) {\n      return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n    } else {\n      return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n    }\n  }\n\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n  }\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist}  |  {this.props.track.album} </p>\n        </div>\n        {this.renderAction()}\n      </div>\n    );\n}\n}\n\nexport default Track;\n","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track'\n\nclass TrackList extends React.Component {\n\n  render() {\n  return (\n    <div className=\"TrackList\">\n        {this.props.tracks.map(track => {\n          return <Track \n          track={track}\n          key={track.id} \n          onAdd={this.props.onAdd} \n          onRemove={this.props.onRemove}\n          isRemoval={this.props.isRemoval}\n          />\n        })\n        }\n    </div>\n  );\n}\n}\n\nexport default TrackList;\n","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList'\n\nclass SearchResults extends React.Component {\n\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList tracks={this.props.searchResults} \n        onAdd={this.props.onAdd}\n\n        />\n      </div>\n    );\n  }\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList'\n\nclass Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n  }\n\n  render() {\n  return (\n    <div className=\"Playlist\">\n      <input defaultValue={'New Playlist'} onChange={this.handleNameChange} />\n      <TrackList \n        tracks={this.props.playlistTracks} \n        onRemove={this.props.onRemove} \n        isRemoval={true}\n      />\n      <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n    </div>\n  );\n}\n}\n\nexport default Playlist;\n","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar'\nimport SearchResults from '../SearchResults/SearchResults'\nimport Playlist from '../Playlist/Playlist'\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks: []\n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: \"New Playlist\",\n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults })\n    });\n  }\n\n  render() {\n  return (\n    <div>\n      <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n      <div className=\"App\">\n        <SearchBar onSearch={this.search}/>\n        <div className=\"App-playlist\">\n        <SearchResults \n        searchResults={this.state.searchResults} \n        onAdd={this.addTrack}\n        />\n          <Playlist \n          playlistName={this.state.playlistName} \n          playlistTracks={this.state.playlistTracks} \n          onRemove={this.removeTrack} \n          onNameChange={this.updatePlaylistName} \n          onSave={this.savePlaylist}\n\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}